// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/07/2019 11:55:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          full_adder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module full_adder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] a;
reg [31:0] bOriginal;
reg c0;
// wires                                               
wire [31:0] b;
wire c8;
wire overflow;
wire [31:0] sum;

// assign statements (if any)                          
full_adder i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.bOriginal(bOriginal),
	.c0(c0),
	.c8(c8),
	.overflow(overflow),
	.sum(sum)
);
initial 
begin 
#1000000 $finish;
end 
// a[ 31 ]
initial
begin
	a[31] = 1'b0;
end 
// a[ 30 ]
initial
begin
	a[30] = 1'b0;
end 
// a[ 29 ]
initial
begin
	a[29] = 1'b0;
end 
// a[ 28 ]
initial
begin
	a[28] = 1'b0;
end 
// a[ 27 ]
initial
begin
	a[27] = 1'b0;
end 
// a[ 26 ]
initial
begin
	a[26] = 1'b0;
end 
// a[ 25 ]
initial
begin
	a[25] = 1'b0;
end 
// a[ 24 ]
initial
begin
	a[24] = 1'b0;
end 
// a[ 23 ]
initial
begin
	a[23] = 1'b0;
end 
// a[ 22 ]
initial
begin
	a[22] = 1'b0;
end 
// a[ 21 ]
initial
begin
	a[21] = 1'b0;
end 
// a[ 20 ]
initial
begin
	a[20] = 1'b0;
end 
// a[ 19 ]
initial
begin
	a[19] = 1'b0;
end 
// a[ 18 ]
initial
begin
	a[18] = 1'b0;
end 
// a[ 17 ]
initial
begin
	a[17] = 1'b0;
end 
// a[ 16 ]
initial
begin
	a[16] = 1'b0;
end 
// a[ 15 ]
initial
begin
	a[15] = 1'b0;
end 
// a[ 14 ]
initial
begin
	a[14] = 1'b0;
end 
// a[ 13 ]
initial
begin
	a[13] = 1'b0;
end 
// a[ 12 ]
initial
begin
	a[12] = 1'b0;
end 
// a[ 11 ]
initial
begin
	a[11] = 1'b0;
end 
// a[ 10 ]
initial
begin
	a[10] = 1'b0;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b0;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b0;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #30000 1'b1;
	a[3] = #110000 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #30000 1'b1;
	a[1] = #110000 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 
// bOriginal[ 31 ]
initial
begin
	bOriginal[31] = 1'b0;
end 
// bOriginal[ 30 ]
initial
begin
	bOriginal[30] = 1'b0;
end 
// bOriginal[ 29 ]
initial
begin
	bOriginal[29] = 1'b0;
end 
// bOriginal[ 28 ]
initial
begin
	bOriginal[28] = 1'b0;
end 
// bOriginal[ 27 ]
initial
begin
	bOriginal[27] = 1'b0;
end 
// bOriginal[ 26 ]
initial
begin
	bOriginal[26] = 1'b0;
end 
// bOriginal[ 25 ]
initial
begin
	bOriginal[25] = 1'b0;
end 
// bOriginal[ 24 ]
initial
begin
	bOriginal[24] = 1'b0;
end 
// bOriginal[ 23 ]
initial
begin
	bOriginal[23] = 1'b0;
end 
// bOriginal[ 22 ]
initial
begin
	bOriginal[22] = 1'b0;
end 
// bOriginal[ 21 ]
initial
begin
	bOriginal[21] = 1'b0;
end 
// bOriginal[ 20 ]
initial
begin
	bOriginal[20] = 1'b0;
end 
// bOriginal[ 19 ]
initial
begin
	bOriginal[19] = 1'b0;
end 
// bOriginal[ 18 ]
initial
begin
	bOriginal[18] = 1'b0;
end 
// bOriginal[ 17 ]
initial
begin
	bOriginal[17] = 1'b0;
end 
// bOriginal[ 16 ]
initial
begin
	bOriginal[16] = 1'b0;
end 
// bOriginal[ 15 ]
initial
begin
	bOriginal[15] = 1'b0;
end 
// bOriginal[ 14 ]
initial
begin
	bOriginal[14] = 1'b0;
end 
// bOriginal[ 13 ]
initial
begin
	bOriginal[13] = 1'b0;
end 
// bOriginal[ 12 ]
initial
begin
	bOriginal[12] = 1'b0;
end 
// bOriginal[ 11 ]
initial
begin
	bOriginal[11] = 1'b0;
end 
// bOriginal[ 10 ]
initial
begin
	bOriginal[10] = 1'b0;
end 
// bOriginal[ 9 ]
initial
begin
	bOriginal[9] = 1'b0;
end 
// bOriginal[ 8 ]
initial
begin
	bOriginal[8] = 1'b0;
end 
// bOriginal[ 7 ]
initial
begin
	bOriginal[7] = 1'b0;
end 
// bOriginal[ 6 ]
initial
begin
	bOriginal[6] = 1'b0;
end 
// bOriginal[ 5 ]
initial
begin
	bOriginal[5] = 1'b0;
end 
// bOriginal[ 4 ]
initial
begin
	bOriginal[4] = 1'b0;
end 
// bOriginal[ 3 ]
initial
begin
	bOriginal[3] = 1'b0;
end 
// bOriginal[ 2 ]
initial
begin
	bOriginal[2] = 1'b0;
end 
// bOriginal[ 1 ]
initial
begin
	bOriginal[1] = 1'b0;
	bOriginal[1] = #90000 1'b1;
	bOriginal[1] = #50000 1'b0;
end 
// bOriginal[ 0 ]
initial
begin
	bOriginal[0] = 1'b0;
	bOriginal[0] = #90000 1'b1;
	bOriginal[0] = #50000 1'b0;
end 

// c0
initial
begin
	c0 = 1'b0;
	c0 = #120000 1'b1;
	c0 = #20000 1'b0;
end 
endmodule

